// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type blockHeaderTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *blockHeaderTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("chain").
func (v *blockHeaderTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *blockHeaderTableType) Columns() []string {
	return []string{"height", "nonce", "timestamp", "block_hash", "prev_hash", "data"}
}

// NewStruct makes a new struct for that view or table.
func (v *blockHeaderTableType) NewStruct() reform.Struct {
	return new(BlockHeader)
}

// NewRecord makes a new record for that table.
func (v *blockHeaderTableType) NewRecord() reform.Record {
	return new(BlockHeader)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *blockHeaderTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// BlockHeaderTable represents chain view or table in SQL database.
var BlockHeaderTable = &blockHeaderTableType{
	s: parse.StructInfo{Type: "BlockHeader", SQLSchema: "", SQLName: "chain", Fields: []parse.FieldInfo{{Name: "Height", Type: "int", Column: "height"}, {Name: "Nonce", Type: "uint", Column: "nonce"}, {Name: "Timestamp", Type: "string", Column: "timestamp"}, {Name: "BlockHash", Type: "string", Column: "block_hash"}, {Name: "PrevHash", Type: "string", Column: "prev_hash"}, {Name: "Data", Type: "[]uint8", Column: "data"}}, PKFieldIndex: 0},
	z: new(BlockHeader).Values(),
}

// String returns a string representation of this struct or record.
func (s BlockHeader) String() string {
	res := make([]string, 6)
	res[0] = "Height: " + reform.Inspect(s.Height, true)
	res[1] = "Nonce: " + reform.Inspect(s.Nonce, true)
	res[2] = "Timestamp: " + reform.Inspect(s.Timestamp, true)
	res[3] = "BlockHash: " + reform.Inspect(s.BlockHash, true)
	res[4] = "PrevHash: " + reform.Inspect(s.PrevHash, true)
	res[5] = "Data: " + reform.Inspect(s.Data, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *BlockHeader) Values() []interface{} {
	return []interface{}{
		s.Height,
		s.Nonce,
		s.Timestamp,
		s.BlockHash,
		s.PrevHash,
		s.Data,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *BlockHeader) Pointers() []interface{} {
	return []interface{}{
		&s.Height,
		&s.Nonce,
		&s.Timestamp,
		&s.BlockHash,
		&s.PrevHash,
		&s.Data,
	}
}

// View returns View object for that struct.
func (s *BlockHeader) View() reform.View {
	return BlockHeaderTable
}

// Table returns Table object for that record.
func (s *BlockHeader) Table() reform.Table {
	return BlockHeaderTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *BlockHeader) PKValue() interface{} {
	return s.Height
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *BlockHeader) PKPointer() interface{} {
	return &s.Height
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *BlockHeader) HasPK() bool {
	return s.Height != BlockHeaderTable.z[BlockHeaderTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *BlockHeader) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.Height = int(i64)
	} else {
		s.Height = pk.(int)
	}
}

// check interfaces
var (
	_ reform.View   = BlockHeaderTable
	_ reform.Struct = (*BlockHeader)(nil)
	_ reform.Table  = BlockHeaderTable
	_ reform.Record = (*BlockHeader)(nil)
	_ fmt.Stringer  = (*BlockHeader)(nil)
)

func init() {
	parse.AssertUpToDate(&BlockHeaderTable.s, new(BlockHeader))
}
